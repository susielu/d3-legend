{"version":3,"file":"indexRollup.js","sources":["src/legend.js","src/color.js","src/size.js","src/symbol.js","src/helpers.js","index.js"],"sourcesContent":["import { select } from \"d3-selection\"\nimport { format, formatPrefix } from \"d3-format\"\n\nconst d3_identity = d => d\n\nconst d3_reverse = arr => {\n  const mirror = []\n  for (let i = 0, l = arr.length; i < l; i++) {\n    mirror[i] = arr[l - i - 1]\n  }\n  return mirror\n}\n\n//Text wrapping code adapted from Mike Bostock\nconst d3_textWrapping = (text, width) => {\n  text.each(function() {\n    var text = select(this),\n      words = text\n        .text()\n        .split(/\\s+/)\n        .reverse(),\n      word,\n      line = [],\n      lineNumber = 0,\n      lineHeight = 1.2, //ems\n      y = text.attr(\"y\"),\n      dy = parseFloat(text.attr(\"dy\")) || 0,\n      tspan = text\n        .text(null)\n        .append(\"tspan\")\n        .attr(\"x\", 0)\n        .attr(\"dy\", dy + \"em\")\n\n    while ((word = words.pop())) {\n      line.push(word)\n      tspan.text(line.join(\" \"))\n      if (tspan.node().getComputedTextLength() > width && line.length > 1) {\n        line.pop()\n        tspan.text(line.join(\" \"))\n        line = [word]\n        tspan = text\n          .append(\"tspan\")\n          .attr(\"x\", 0)\n          .attr(\"dy\", lineHeight + dy + \"em\")\n          .text(word)\n      }\n    }\n  })\n}\n\nconst d3_mergeLabels = (gen = [], labels, domain, range, labelDelimiter) => {\n  if (typeof labels === \"object\") {\n    if (labels.length === 0) return gen\n\n    let i = labels.length\n    for (; i < gen.length; i++) {\n      labels.push(gen[i])\n    }\n    return labels\n  } else if (typeof labels === \"function\") {\n    const customLabels = []\n    const genLength = gen.length\n    for (let i = 0; i < genLength; i++) {\n      customLabels.push(\n        labels({\n          i,\n          genLength,\n          generatedLabels: gen,\n          domain,\n          range,\n          labelDelimiter\n        })\n      )\n    }\n    return customLabels\n  }\n\n  return gen\n}\n\nconst d3_linearLegend = (scale, cells, labelFormat) => {\n  let data = []\n\n  if (cells.length > 1) {\n    data = cells\n  } else {\n    const domain = scale.domain(),\n      increment = (domain[domain.length - 1] - domain[0]) / (cells - 1)\n    let i = 0\n\n    for (; i < cells; i++) {\n      data.push(domain[0] + i * increment)\n    }\n  }\n\n  const labels = data.map(labelFormat)\n  return {\n    data: data,\n    labels: labels,\n    feature: d => scale(d)\n  }\n}\n\nconst d3_quantLegend = (scale, labelFormat, labelDelimiter) => {\n  const labels = scale.range().map(d => {\n    const invert = scale.invertExtent(d)\n    return (\n      labelFormat(invert[0]) +\n      \" \" +\n      labelDelimiter +\n      \" \" +\n      labelFormat(invert[1])\n    )\n  })\n\n  return {\n    data: scale.range(),\n    labels: labels,\n    feature: d3_identity\n  }\n}\n\nconst d3_ordinalLegend = scale => ({\n  data: scale.domain(),\n  labels: scale.domain(),\n  feature: d => scale(d)\n})\n\nconst d3_cellOver = (cellDispatcher, d, obj) => {\n  cellDispatcher.call(\"cellover\", obj, d)\n}\n\nconst d3_cellOut = (cellDispatcher, d, obj) => {\n  cellDispatcher.call(\"cellout\", obj, d)\n}\n\nconst d3_cellClick = (cellDispatcher, d, obj) => {\n  cellDispatcher.call(\"cellclick\", obj, d)\n}\n\nexport default {\n  d3_drawShapes: (\n    shape,\n    shapes,\n    shapeHeight,\n    shapeWidth,\n    shapeRadius,\n    path\n  ) => {\n    if (shape === \"rect\") {\n      shapes.attr(\"height\", shapeHeight).attr(\"width\", shapeWidth)\n    } else if (shape === \"circle\") {\n      shapes.attr(\"r\", shapeRadius)\n    } else if (shape === \"line\") {\n      shapes\n        .attr(\"x1\", 0)\n        .attr(\"x2\", shapeWidth)\n        .attr(\"y1\", 0)\n        .attr(\"y2\", 0)\n    } else if (shape === \"path\") {\n      shapes.attr(\"d\", path)\n    }\n  },\n\n  d3_addText: function(svg, enter, labels, classPrefix, labelWidth) {\n    return Promise.all(labels).then(resolvedLabels => {\n      enter.append(\"text\").attr(\"class\", classPrefix + \"label\")\n      const text = svg\n        .selectAll(`g.${classPrefix}cell text.${classPrefix}label`)\n        .data(resolvedLabels)\n        .text(d3_identity)\n\n      if (labelWidth) {\n        svg\n          .selectAll(`g.${classPrefix}cell text.${classPrefix}label`)\n          .call(d3_textWrapping, labelWidth)\n      }\n      return text\n    })\n  },\n\n  d3_calcType: function(\n    scale,\n    ascending,\n    cells,\n    labels,\n    labelFormat,\n    labelDelimiter\n  ) {\n    const type = scale.invertExtent\n      ? d3_quantLegend(scale, labelFormat, labelDelimiter)\n      : scale.ticks\n        ? d3_linearLegend(scale, cells, labelFormat)\n        : d3_ordinalLegend(scale)\n\n    //for d3.scaleSequential that doesn't have a range function\n    const range = (scale.range && scale.range()) || scale.domain()\n    type.labels = d3_mergeLabels(\n      type.labels,\n      labels,\n      scale.domain(),\n      range,\n      labelDelimiter\n    )\n\n    if (ascending) {\n      type.labels = d3_reverse(type.labels)\n      type.data = d3_reverse(type.data)\n    }\n\n    return type\n  },\n\n  d3_filterCells: (type, cellFilter) => {\n    let filterCells = type.data\n      .map((d, i) => ({ data: d, label: type.labels[i] }))\n      .filter(cellFilter)\n    const dataValues = filterCells.map(d => d.data)\n    const labelValues = filterCells.map(d => d.label)\n    type.data = type.data.filter(d => dataValues.indexOf(d) !== -1)\n    type.labels = type.labels.filter(d => labelValues.indexOf(d) !== -1)\n    return type\n  },\n\n  d3_placement: (orient, cell, cellTrans, text, textTrans, labelAlign) => {\n    cell.attr(\"transform\", cellTrans)\n    text.attr(\"transform\", textTrans)\n    if (orient === \"horizontal\") {\n      text.style(\"text-anchor\", labelAlign)\n    }\n  },\n\n  d3_addEvents: function(cells, dispatcher) {\n    cells\n      .on(\"mouseover.legend\", function(d) {\n        d3_cellOver(dispatcher, d, this)\n      })\n      .on(\"mouseout.legend\", function(d) {\n        d3_cellOut(dispatcher, d, this)\n      })\n      .on(\"click.legend\", function(d) {\n        d3_cellClick(dispatcher, d, this)\n      })\n  },\n\n  d3_title: (svg, title, classPrefix, titleWidth) => {\n    if (title !== \"\") {\n      const titleText = svg.selectAll(\"text.\" + classPrefix + \"legendTitle\")\n\n      titleText\n        .data([title])\n        .enter()\n        .append(\"text\")\n        .attr(\"class\", classPrefix + \"legendTitle\")\n\n      svg.selectAll(\"text.\" + classPrefix + \"legendTitle\").text(title)\n\n      if (titleWidth) {\n        svg\n          .selectAll(\"text.\" + classPrefix + \"legendTitle\")\n          .call(d3_textWrapping, titleWidth)\n      }\n\n      const cellsSvg = svg.select(\".\" + classPrefix + \"legendCells\")\n      const yOffset = svg\n          .select(\".\" + classPrefix + \"legendTitle\")\n          .nodes()\n          .map(d => d.getBBox().height)[0],\n        xOffset = -cellsSvg.nodes().map(function(d) {\n          return d.getBBox().x\n        })[0]\n      cellsSvg.attr(\"transform\", \"translate(\" + xOffset + \",\" + yOffset + \")\")\n    }\n  },\n\n  d3_defaultLocale: {\n    format,\n    formatPrefix\n  },\n\n  d3_defaultFormatSpecifier: \".01f\",\n\n  d3_defaultDelimiter: \"to\"\n}\n","import helper from \"./legend\"\nimport { dispatch } from \"d3-dispatch\"\nimport { scaleLinear } from \"d3-scale\"\nimport { formatLocale, formatSpecifier } from \"d3-format\"\n\nimport { sum } from \"d3-array\"\n\nexport default function color() {\n  let scale = scaleLinear(),\n    shape = \"rect\",\n    shapeWidth = 15,\n    shapeHeight = 15,\n    shapeRadius = 10,\n    shapePadding = 2,\n    cells = [5],\n    cellFilter,\n    labels = [],\n    classPrefix = \"\",\n    useClass = false,\n    title = \"\",\n    locale = helper.d3_defaultLocale,\n    specifier = helper.d3_defaultFormatSpecifier,\n    labelOffset = 10,\n    labelAlign = \"middle\",\n    labelDelimiter = helper.d3_defaultDelimiter,\n    labelWrap,\n    orient = \"vertical\",\n    ascending = false,\n    path,\n    titleWidth,\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\")\n\n  function legend(svg) {\n    const type = helper.d3_calcType(\n        scale,\n        ascending,\n        cells,\n        labels,\n        locale.format(specifier),\n        labelDelimiter\n      ),\n      legendG = svg.selectAll(\"g\").data([scale])\n\n    legendG\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", classPrefix + \"legendCells\")\n\n    if (cellFilter) {\n      helper.d3_filterCells(type, cellFilter)\n    }\n\n    let cell = svg\n      .select(\".\" + classPrefix + \"legendCells\")\n      .selectAll(\".\" + classPrefix + \"cell\")\n      .data(type.data)\n\n    const cellEnter = cell\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", classPrefix + \"cell\")\n    cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\")\n\n    let shapes = svg\n      .selectAll(\n        \"g.\" + classPrefix + \"cell \" + shape + \".\" + classPrefix + \"swatch\"\n      )\n      .data(type.data)\n\n    //add event handlers\n    helper.d3_addEvents(cellEnter, legendDispatcher)\n\n    cell\n      .exit()\n      .transition()\n      .style(\"opacity\", 0)\n      .remove();\n    \n    shapes\n      .exit()\n      .transition()\n      .style(\"opacity\", 0)\n      .remove();\n\n    shapes = shapes.merge(shapes);\n    // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\n    cell = cellEnter.merge(cell);\n\n    helper.d3_drawShapes(\n      shape,\n      shapes,\n      shapeHeight,\n      shapeWidth,\n      shapeRadius,\n      path\n    );\n    \n    helper.d3_addText(\n      svg,\n      cellEnter,\n      type.labels,\n      classPrefix,\n      labelWrap\n    )\n    .then(text => {\n\n      // sets placement\n      const textSize = text.nodes().map(d => d.getBBox()),\n        shapeSize = shapes.nodes().map(d => d.getBBox());\n      //sets scale\n      //everything is fill except for line which is stroke,\n      if (!useClass) {\n        if (shape == \"line\") {\n          shapes.style(\"stroke\", type.feature)\n        } else {\n          shapes.style(\"fill\", type.feature)\n        }\n      } else {\n        shapes.attr(\"class\", d => `${classPrefix}swatch ${type.feature(d)}`)\n      }\n\n      let cellTrans,\n        textTrans,\n        textAlign = labelAlign == \"start\" ? 0 : labelAlign == \"middle\" ? 0.5 : 1\n\n      //positions cells and text\n      if (orient === \"vertical\") {\n        const cellSize = textSize.map((d, i) =>\n          Math.max(d.height, shapeSize[i].height)\n        )\n\n        cellTrans = (d, i) => {\n          const height = sum(cellSize.slice(0, i))\n          return `translate(0, ${height + i * shapePadding})`\n        }\n\n        textTrans = (d, i) =>\n          `translate( ${shapeSize[i].width +\n            shapeSize[i].x +\n            labelOffset}, ${shapeSize[i].y + shapeSize[i].height / 2 + 5})`\n      } else if (orient === \"horizontal\") {\n        cellTrans = (d, i) =>\n          `translate(${i * (shapeSize[i].width + shapePadding)},0)`\n        textTrans = (d, i) => `translate(${shapeSize[i].width * textAlign +\n          shapeSize[i].x},\n            ${shapeSize[i].height + shapeSize[i].y + labelOffset + 8})`\n      }\n\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign)\n      helper.d3_title(svg, title, classPrefix, titleWidth)\n\n      cell.transition().style(\"opacity\", 1)\n    })\n  }\n\n  legend.scale = function(_) {\n    if (!arguments.length) return scale\n    scale = _\n    return legend\n  }\n\n  legend.cells = function(_) {\n    if (!arguments.length) return cells\n    if (_.length > 1 || _ >= 2) {\n      cells = _\n    }\n    return legend\n  }\n\n  legend.cellFilter = function(_) {\n    if (!arguments.length) return cellFilter\n    cellFilter = _\n    return legend\n  }\n\n  legend.shape = function(_, d) {\n    if (!arguments.length) return shape\n    if (\n      _ == \"rect\" ||\n      _ == \"circle\" ||\n      _ == \"line\" ||\n      (_ == \"path\" && typeof d === \"string\")\n    ) {\n      shape = _\n      path = d\n    }\n    return legend\n  }\n\n  legend.shapeWidth = function(_) {\n    if (!arguments.length) return shapeWidth\n    shapeWidth = +_\n    return legend\n  }\n\n  legend.shapeHeight = function(_) {\n    if (!arguments.length) return shapeHeight\n    shapeHeight = +_\n    return legend\n  }\n\n  legend.shapeRadius = function(_) {\n    if (!arguments.length) return shapeRadius\n    shapeRadius = +_\n    return legend\n  }\n\n  legend.shapePadding = function(_) {\n    if (!arguments.length) return shapePadding\n    shapePadding = +_\n    return legend\n  }\n\n  legend.labels = function(_) {\n    if (!arguments.length) return labels\n    labels = _\n    return legend\n  }\n\n  legend.labelAlign = function(_) {\n    if (!arguments.length) return labelAlign\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\n      labelAlign = _\n    }\n    return legend\n  }\n\n  legend.locale = function(_) {\n    if (!arguments.length) return locale\n    locale = formatLocale(_)\n    return legend\n  }\n\n  legend.labelFormat = function(_) {\n    if (!arguments.length) return legend.locale().format(specifier)\n    specifier = formatSpecifier(_)\n    return legend\n  }\n\n  legend.labelOffset = function(_) {\n    if (!arguments.length) return labelOffset\n    labelOffset = +_\n    return legend\n  }\n\n  legend.labelDelimiter = function(_) {\n    if (!arguments.length) return labelDelimiter\n    labelDelimiter = _\n    return legend\n  }\n\n  legend.labelWrap = function(_) {\n    if (!arguments.length) return labelWrap\n    labelWrap = _\n    return legend\n  }\n\n  legend.useClass = function(_) {\n    if (!arguments.length) return useClass\n    if (_ === true || _ === false) {\n      useClass = _\n    }\n    return legend\n  }\n\n  legend.orient = function(_) {\n    if (!arguments.length) return orient\n    _ = _.toLowerCase()\n    if (_ == \"horizontal\" || _ == \"vertical\") {\n      orient = _\n    }\n    return legend\n  }\n\n  legend.ascending = function(_) {\n    if (!arguments.length) return ascending\n    ascending = !!_\n    return legend\n  }\n\n  legend.classPrefix = function(_) {\n    if (!arguments.length) return classPrefix\n    classPrefix = _\n    return legend\n  }\n\n  legend.title = function(_) {\n    if (!arguments.length) return title\n    title = _\n    return legend\n  }\n\n  legend.titleWidth = function(_) {\n    if (!arguments.length) return titleWidth\n    titleWidth = _\n    return legend\n  }\n\n  legend.textWrap = function(_) {\n    if (!arguments.length) return textWrap\n    textWrap = _\n    return legend\n  }\n\n  legend.on = function() {\n    const value = legendDispatcher.on.apply(legendDispatcher, arguments)\n    return value === legendDispatcher ? legend : value\n  }\n\n  return legend\n}\n","import helper from \"./legend\"\nimport { dispatch } from \"d3-dispatch\"\nimport { scaleLinear } from \"d3-scale\"\nimport { formatLocale, formatSpecifier } from \"d3-format\"\nimport { sum, max } from \"d3-array\"\n\nexport default function size() {\n  let scale = scaleLinear(),\n    shape = \"rect\",\n    shapeWidth = 15,\n    shapePadding = 2,\n    cells = [5],\n    cellFilter,\n    labels = [],\n    classPrefix = \"\",\n    title = \"\",\n    locale = helper.d3_defaultLocale,\n    specifier = helper.d3_defaultFormatSpecifier,\n    labelOffset = 10,\n    labelAlign = \"middle\",\n    labelDelimiter = helper.d3_defaultDelimiter,\n    labelWrap,\n    orient = \"vertical\",\n    ascending = false,\n    path,\n    titleWidth,\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\")\n\n  function legend(svg) {\n    const type = helper.d3_calcType(\n        scale,\n        ascending,\n        cells,\n        labels,\n        locale.format(specifier),\n        labelDelimiter\n      ),\n      legendG = svg.selectAll(\"g\").data([scale])\n\n    if (cellFilter) {\n      helper.d3_filterCells(type, cellFilter)\n    }\n\n    legendG\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", classPrefix + \"legendCells\")\n\n    let cell = svg\n      .select(\".\" + classPrefix + \"legendCells\")\n      .selectAll(\".\" + classPrefix + \"cell\")\n      .data(type.data)\n    const cellEnter = cell\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", classPrefix + \"cell\")\n    cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\")\n\n    let shapes = svg.selectAll(\n      \"g.\" + classPrefix + \"cell \" + shape + \".\" + classPrefix + \"swatch\"\n    )\n\n    //add event handlers\n    helper.d3_addEvents(cellEnter, legendDispatcher)\n\n    cell\n      .exit()\n      .transition()\n      .style(\"opacity\", 0)\n      .remove()\n\n    shapes\n      .exit()\n      .transition()\n      .style(\"opacity\", 0)\n      .remove()\n    \n    shapes = shapes.merge(shapes)\n    // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\n    cell = cellEnter.merge(cell)\n\n    //creates shape\n    if (shape === \"line\") {\n      helper.d3_drawShapes(shape, shapes, 0, shapeWidth)\n      shapes.attr(\"stroke-width\", type.feature)\n    } else {\n      helper.d3_drawShapes(\n        shape,\n        shapes,\n        type.feature,\n        type.feature,\n        type.feature,\n        path\n      )\n    }\n\n    helper.d3_addText(\n      svg,\n      cellEnter,\n      type.labels,\n      classPrefix,\n      labelWrap\n    )\n    .then(text => {\n\n      //sets placement\n      const textSize = text.nodes().map(d => d.getBBox()),\n        shapeSize = shapes.nodes().map((d, i) => {\n          const bbox = d.getBBox()\n          const stroke = scale(type.data[i])\n\n          if (shape === \"line\" && orient === \"horizontal\") {\n            bbox.height = bbox.height + stroke\n          } else if (shape === \"line\" && orient === \"vertical\") {\n            bbox.width = bbox.width\n          }\n          return bbox\n        })\n\n      const maxH = max(shapeSize, d => d.height + d.y),\n        maxW = max(shapeSize, d => d.width + d.x)\n\n      let cellTrans,\n        textTrans,\n        textAlign = labelAlign == \"start\" ? 0 : labelAlign == \"middle\" ? 0.5 : 1\n\n      //positions cells and text\n      if (orient === \"vertical\") {\n        const cellSize = textSize.map((d, i) =>\n          Math.max(d.height, shapeSize[i].height)\n        )\n        const y =\n          shape == \"circle\" || shape == \"line\" ? shapeSize[0].height / 2 : 0\n        cellTrans = (d, i) => {\n          const height = sum(cellSize.slice(0, i))\n\n          return `translate(0, ${y + height + i * shapePadding})`\n        }\n\n        textTrans = (d, i) => `translate( ${maxW + labelOffset},\n            ${shapeSize[i].y + shapeSize[i].height / 2 + 5})`\n      } else if (orient === \"horizontal\") {\n        cellTrans = (d, i) => {\n          const width = sum(shapeSize.slice(0, i), d => d.width)\n          const y = shape == \"circle\" || shape == \"line\" ? maxH / 2 : 0\n          return `translate(${width + i * shapePadding}, ${y})`\n        }\n\n        const offset = shape == \"line\" ? maxH / 2 : maxH\n        textTrans = (d, i) => {\n          return `translate( ${shapeSize[i].width * textAlign + shapeSize[i].x},\n                ${offset + labelOffset})`\n        }\n      }\n\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign)\n      helper.d3_title(svg, title, classPrefix, titleWidth)\n\n      cell.transition().style(\"opacity\", 1)\n     })\n  }\n\n  legend.scale = function(_) {\n    if (!arguments.length) return scale\n    scale = _\n    return legend\n  }\n\n  legend.cells = function(_) {\n    if (!arguments.length) return cells\n    if (_.length > 1 || _ >= 2) {\n      cells = _\n    }\n    return legend\n  }\n\n  legend.cellFilter = function(_) {\n    if (!arguments.length) return cellFilter\n    cellFilter = _\n    return legend\n  }\n\n  legend.shape = function(_, d) {\n    if (!arguments.length) return shape\n    if (_ == \"rect\" || _ == \"circle\" || _ == \"line\") {\n      shape = _\n      path = d\n    }\n    return legend\n  }\n\n  legend.shapeWidth = function(_) {\n    if (!arguments.length) return shapeWidth\n    shapeWidth = +_\n    return legend\n  }\n\n  legend.shapePadding = function(_) {\n    if (!arguments.length) return shapePadding\n    shapePadding = +_\n    return legend\n  }\n\n  legend.labels = function(_) {\n    if (!arguments.length) return labels\n    labels = _\n    return legend\n  }\n\n  legend.labelAlign = function(_) {\n    if (!arguments.length) return labelAlign\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\n      labelAlign = _\n    }\n    return legend\n  }\n\n  legend.locale = function(_) {\n    if (!arguments.length) return locale\n    locale = formatLocale(_)\n    return legend\n  }\n\n  legend.labelFormat = function(_) {\n    if (!arguments.length) return legend.locale().format(specifier)\n    specifier = formatSpecifier(_)\n    return legend\n  }\n\n  legend.labelOffset = function(_) {\n    if (!arguments.length) return labelOffset\n    labelOffset = +_\n    return legend\n  }\n\n  legend.labelDelimiter = function(_) {\n    if (!arguments.length) return labelDelimiter\n    labelDelimiter = _\n    return legend\n  }\n\n  legend.labelWrap = function(_) {\n    if (!arguments.length) return labelWrap\n    labelWrap = _\n    return legend\n  }\n\n  legend.orient = function(_) {\n    if (!arguments.length) return orient\n    _ = _.toLowerCase()\n    if (_ == \"horizontal\" || _ == \"vertical\") {\n      orient = _\n    }\n    return legend\n  }\n\n  legend.ascending = function(_) {\n    if (!arguments.length) return ascending\n    ascending = !!_\n    return legend\n  }\n\n  legend.classPrefix = function(_) {\n    if (!arguments.length) return classPrefix\n    classPrefix = _\n    return legend\n  }\n\n  legend.title = function(_) {\n    if (!arguments.length) return title\n    title = _\n    return legend\n  }\n\n  legend.titleWidth = function(_) {\n    if (!arguments.length) return titleWidth\n    titleWidth = _\n    return legend\n  }\n\n  legend.on = function() {\n    const value = legendDispatcher.on.apply(legendDispatcher, arguments)\n    return value === legendDispatcher ? legend : value\n  }\n\n  return legend\n}\n","import helper from \"./legend\"\nimport { dispatch } from \"d3-dispatch\"\nimport { scaleLinear } from \"d3-scale\"\nimport { formatLocale, formatSpecifier } from \"d3-format\"\nimport { sum, max } from \"d3-array\"\n\nexport default function symbol() {\n  let scale = scaleLinear(),\n    shape = \"path\",\n    shapeWidth = 15,\n    shapeHeight = 15,\n    shapeRadius = 10,\n    shapePadding = 5,\n    cells = [5],\n    cellFilter,\n    labels = [],\n    classPrefix = \"\",\n    title = \"\",\n    locale = helper.d3_defaultLocale,\n    specifier = helper.d3_defaultFormatSpecifier,\n    labelAlign = \"middle\",\n    labelOffset = 10,\n    labelDelimiter = helper.d3_defaultDelimiter,\n    labelWrap,\n    orient = \"vertical\",\n    ascending = false,\n    titleWidth,\n    legendDispatcher = dispatch(\"cellover\", \"cellout\", \"cellclick\")\n\n  function legend(svg) {\n    const type = helper.d3_calcType(\n        scale,\n        ascending,\n        cells,\n        labels,\n        locale.format(specifier),\n        labelDelimiter\n      ),\n      legendG = svg.selectAll(\"g\").data([scale])\n\n    if (cellFilter) {\n      helper.d3_filterCells(type, cellFilter)\n    }\n\n    legendG\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", classPrefix + \"legendCells\")\n\n    let cell = svg\n      .select(\".\" + classPrefix + \"legendCells\")\n      .selectAll(\".\" + classPrefix + \"cell\")\n      .data(type.data)\n    const cellEnter = cell\n      .enter()\n      .append(\"g\")\n      .attr(\"class\", classPrefix + \"cell\")\n    cellEnter.append(shape).attr(\"class\", classPrefix + \"swatch\")\n\n    let shapes = svg.selectAll(\"g.\" + classPrefix + \"cell \" + shape + \".\" + classPrefix + \"swatch\")\n\n    //add event handlers\n    helper.d3_addEvents(cellEnter, legendDispatcher)\n\n    //remove old shapes\n    cell\n      .exit()\n      .transition()\n      .style(\"opacity\", 0)\n      .remove()\n    shapes\n      .exit()\n      .transition()\n      .style(\"opacity\", 0)\n      .remove()\n\n    shapes = shapes.merge(shapes)\n    // we need to merge the selection, otherwise changes in the legend (e.g. change of orientation) are applied only to the new cells and not the existing ones.\n    cell = cellEnter.merge(cell)\n\n    helper.d3_drawShapes(\n      shape,\n      shapes,\n      shapeHeight,\n      shapeWidth,\n      shapeRadius,\n      type.feature\n    )\n    \n    helper.d3_addText(\n      svg,\n      cellEnter,\n      type.labels,\n      classPrefix,\n      labelWrap\n    )\n    .then(text => {\n\n      // sets placement\n      const textSize = text.nodes().map(d => d.getBBox()),\n        shapeSize = shapes.nodes().map(d => d.getBBox())\n\n      const maxH = max(shapeSize, d => d.height),\n        maxW = max(shapeSize, d => d.width)\n\n      let cellTrans,\n        textTrans,\n        textAlign = labelAlign == \"start\" ? 0 : labelAlign == \"middle\" ? 0.5 : 1\n\n      //positions cells and text\n      if (orient === \"vertical\") {\n        const cellSize = textSize.map((d, i) => Math.max(maxH, d.height))\n\n        cellTrans = (d, i) => {\n          const height = sum(cellSize.slice(0, i))\n          return `translate(0, ${height + i * shapePadding} )`\n        }\n        textTrans = (d, i) => `translate( ${maxW + labelOffset},\n                ${shapeSize[i].y + shapeSize[i].height / 2 + 5})`\n      } else if (orient === \"horizontal\") {\n        cellTrans = (d, i) => `translate( ${i * (maxW + shapePadding)},0)`\n        textTrans = (d, i) => `translate( ${shapeSize[i].width * textAlign +\n          shapeSize[i].x},\n                ${maxH + labelOffset})`\n      }\n\n      helper.d3_placement(orient, cell, cellTrans, text, textTrans, labelAlign)\n      helper.d3_title(svg, title, classPrefix, titleWidth)\n      cell.transition().style(\"opacity\", 1)\n    })\n  }\n\n  legend.scale = function(_) {\n    if (!arguments.length) return scale\n    scale = _\n    return legend\n  }\n\n  legend.cells = function(_) {\n    if (!arguments.length) return cells\n    if (_.length > 1 || _ >= 2) {\n      cells = _\n    }\n    return legend\n  }\n\n  legend.cellFilter = function(_) {\n    if (!arguments.length) return cellFilter\n    cellFilter = _\n    return legend\n  }\n\n  legend.shapePadding = function(_) {\n    if (!arguments.length) return shapePadding\n    shapePadding = +_\n    return legend\n  }\n\n  legend.labels = function(_) {\n    if (!arguments.length) return labels\n    labels = _\n    return legend\n  }\n\n  legend.labelAlign = function(_) {\n    if (!arguments.length) return labelAlign\n    if (_ == \"start\" || _ == \"end\" || _ == \"middle\") {\n      labelAlign = _\n    }\n    return legend\n  }\n\n  legend.locale = function(_) {\n    if (!arguments.length) return locale\n    locale = formatLocale(_)\n    return legend\n  }\n\n  legend.labelFormat = function(_) {\n    if (!arguments.length) return legend.locale().format(specifier)\n    specifier = formatSpecifier(_)\n    return legend\n  }\n\n  legend.labelOffset = function(_) {\n    if (!arguments.length) return labelOffset\n    labelOffset = +_\n    return legend\n  }\n\n  legend.labelDelimiter = function(_) {\n    if (!arguments.length) return labelDelimiter\n    labelDelimiter = _\n    return legend\n  }\n\n  legend.labelWrap = function(_) {\n    if (!arguments.length) return labelWrap\n    labelWrap = _\n    return legend\n  }\n\n  legend.orient = function(_) {\n    if (!arguments.length) return orient\n    _ = _.toLowerCase()\n    if (_ == \"horizontal\" || _ == \"vertical\") {\n      orient = _\n    }\n    return legend\n  }\n\n  legend.ascending = function(_) {\n    if (!arguments.length) return ascending\n    ascending = !!_\n    return legend\n  }\n\n  legend.classPrefix = function(_) {\n    if (!arguments.length) return classPrefix\n    classPrefix = _\n    return legend\n  }\n\n  legend.title = function(_) {\n    if (!arguments.length) return title\n    title = _\n    return legend\n  }\n\n  legend.titleWidth = function(_) {\n    if (!arguments.length) return titleWidth\n    titleWidth = _\n    return legend\n  }\n\n  legend.on = function() {\n    const value = legendDispatcher.on.apply(legendDispatcher, arguments)\n    return value === legendDispatcher ? legend : value\n  }\n\n  return legend\n}\n","export const thresholdLabels = function({\n  i,\n  genLength,\n  generatedLabels,\n  labelDelimiter\n}) {\n  if (i === 0) {\n    const values = generatedLabels[i].split(` ${labelDelimiter} `)\n    return `Less than ${values[1]}`\n  } else if (i === genLength - 1) {\n    const values = generatedLabels[i].split(` ${labelDelimiter} `)\n    return `${values[0]} or more`\n  }\n  return generatedLabels[i]\n}\n\nexport default {\n  thresholdLabels\n}\n","import legendColor from './src/color'\nimport legendSize from './src/size'\nimport legendSymbol from './src/symbol'\nimport legendHelpers from './src/helpers'\n\nexport { legendColor, legendSize, legendSymbol, legendHelpers }\n\nexport default {\n  legendColor,\n  legendSize,\n  legendSymbol,\n  legendHelpers\n};\n"],"names":["d3_identity","d","d3_reverse","mirror","i","l","arr","length","d3_textWrapping","text","width","each","select","words","split","reverse","word","line","lineNumber","lineHeight","attr","dy","parseFloat","tspan","append","pop","push","join","node","getComputedTextLength","d3_mergeLabels","gen","labels","domain","range","labelDelimiter","customLabels","genLength","d3_linearLegend","scale","cells","labelFormat","data","increment","map","d3_quantLegend","invert","invertExtent","d3_ordinalLegend","d3_cellOver","cellDispatcher","obj","call","d3_cellOut","d3_cellClick","shape","shapes","shapeHeight","shapeWidth","shapeRadius","path","svg","enter","classPrefix","labelWidth","Promise","all","then","selectAll","resolvedLabels","ascending","type","ticks","cellFilter","filterCells","label","filter","dataValues","labelValues","indexOf","orient","cell","cellTrans","textTrans","labelAlign","style","dispatcher","on","title","titleWidth","titleText","cellsSvg","yOffset","nodes","getBBox","height","xOffset","x","color","scaleLinear","shapePadding","useClass","locale","helper","d3_defaultLocale","specifier","d3_defaultFormatSpecifier","labelOffset","d3_defaultDelimiter","labelWrap","legendDispatcher","dispatch","legend","d3_calcType","format","legendG","d3_filterCells","cellEnter","d3_addEvents","exit","transition","remove","merge","d3_drawShapes","d3_addText","textSize","shapeSize","feature","textAlign","cellSize","Math","max","sum","slice","y","d3_placement","d3_title","_","arguments","formatLocale","formatSpecifier","toLowerCase","textWrap","value","apply","size","bbox","stroke","maxH","maxW","offset","symbol","thresholdLabels","generatedLabels","values"],"mappings":"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"}